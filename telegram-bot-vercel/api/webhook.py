import os
import datetime
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, CallbackQueryHandler, MessageHandler, filters

TOKEN = os.environ["TOKEN"]
CHAT_ID = int(os.environ["CHAT_ID"])
ADMIN_ID = int(os.environ["ADMIN_ID"])

bot = Bot(TOKEN)
dispatcher = Dispatcher(bot, None, workers=0)

user_states = {}

def get_user_link(user):
    if user.username:
        return f"@{user.username}"
    else:
        return f"<a href='tg://user?id={user.id}'>{user.first_name}</a>"

# /start
def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üí≥ 1000 ‚ÇΩ ‚Äî 1 –º–µ—Å—è—Ü", callback_data="plan_1000_1")],
        [InlineKeyboardButton("üí≥ 2500 ‚ÇΩ ‚Äî 3 –º–µ—Å—è—Ü–∞", callback_data="plan_2500_3")],
        [InlineKeyboardButton("üí≥ 5000 ‚ÇΩ ‚Äî 6 –º–µ—Å—è—Ü–µ–≤", callback_data="plan_5000_6")],
        [InlineKeyboardButton("üí≥ 10 000 ‚ÇΩ ‚Äî 12 –º–µ—Å—è—Ü–µ–≤", callback_data="plan_10000_12")],
        [InlineKeyboardButton("üì© –ü–æ–º–æ—â—å", url="https://t.me/Russian_2652")]
    ]
    update.message.reply_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "üìå 2204 3101 7224 7291 –ü–æ–ª—É—á–∞—Ç–µ–ª—å –¢–∞—Ç—å—è–Ω–∞ –î. –ë–∞–Ω–∫ –Ø–Ω–¥–µ–∫—Å\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

dispatcher.add_handler(CommandHandler("start", start))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫
def callback_handler(update: Update, context):
    query = update.callback_query
    query.answer()
    if query.data.startswith("plan_"):
        parts = query.data.split("_")
        price, months = parts[1], parts[2]
        user_id = query.from_user.id
        user_states[user_id] = {"state": "waiting_screenshot", "plan": f"{price}‚ÇΩ / {months} –º–µ—Å."}

        keyboard = [
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")],
            [InlineKeyboardButton("üì© –ü–æ–º–æ—â—å", url="https://t.me/Russian_2652")]
        ]
        query.message.reply_text(
            f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ {price}‚ÇΩ –∑–∞ {months} –º–µ—Å.\n"
            "üìå 2204 3101 7224 7291 –ü–æ–ª—É—á–∞—Ç–µ–ª—å –¢–∞—Ç—å—è–Ω–∞ –î. –ë–∞–Ω–∫ –Ø–Ω–¥–µ–∫—Å\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif query.data == "paid":
        user_id = query.from_user.id
        user_states[user_id] = "waiting_screenshot"
        query.message.reply_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).")

dispatcher.add_handler(CallbackQueryHandler(callback_handler))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞
def handle_file(update: Update, context):
    user_id = update.message.from_user.id
    state = user_states.get(user_id)
    if state == "waiting_screenshot":
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve_{user_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
        ]
        if update.message.photo:
            bot.send_photo(chat_id=ADMIN_ID, photo=update.message.photo[-1].file_id,
                           caption=f"üí∞ –ó–∞—è–≤–∫–∞ –æ—Ç {get_user_link(update.message.from_user)}",
                           reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
        elif update.message.document:
            bot.send_document(chat_id=ADMIN_ID, document=update.message.document.file_id,
                              caption=f"üí∞ –ó–∞—è–≤–∫–∞ –æ—Ç {get_user_link(update.message.from_user)}",
                              reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
        user_states[user_id] = None

dispatcher.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_file))

# Vercel handler
def handler(request):
    import json
    if request.method == "POST":
        data = json.loads(request.data)
        update = Update.de_json(data, bot)
        dispatcher.process_update(update)
        return {"status": 200}
    return {"status": 200, "body": "Bot is running!"}
